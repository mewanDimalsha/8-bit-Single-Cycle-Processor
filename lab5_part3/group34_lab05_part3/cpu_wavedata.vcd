$date
	Wed May 24 10:02:47 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module cpu1 $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 8 & registerOp [7:0] $end
$var wire 8 ' negatedOp [7:0] $end
$var wire 3 ( WRITEREG [2:0] $end
$var wire 8 ) REGOUT2 [7:0] $end
$var wire 8 * REGOUT1 [7:0] $end
$var wire 3 + READREG2 [2:0] $end
$var wire 3 , READREG1 [2:0] $end
$var wire 8 - OPERAND2 [7:0] $end
$var wire 8 . IMMEDIATE [7:0] $end
$var wire 8 / ALURESULT [7:0] $end
$var reg 3 0 ALUOP [2:0] $end
$var reg 8 1 OPCODE [7:0] $end
$var reg 32 2 PC [31:0] $end
$var reg 32 3 PCreg [31:0] $end
$var reg 1 4 WRITEENABLE $end
$var reg 1 5 immSelect $end
$var reg 1 6 signSelect $end
$scope module alu1 $end
$var wire 3 7 SELECT [2:0] $end
$var wire 8 8 DATA2 [7:0] $end
$var wire 8 9 DATA1 [7:0] $end
$var wire 8 : C3 [7:0] $end
$var wire 8 ; C2 [7:0] $end
$var wire 8 < C1 [7:0] $end
$var wire 8 = C0 [7:0] $end
$var reg 8 > RESULT [7:0] $end
$scope module case0 $end
$var wire 8 ? RESULT [7:0] $end
$var wire 8 @ DATA2 [7:0] $end
$var wire 8 A DATA1 [7:0] $end
$upscope $end
$scope module case1 $end
$var wire 8 B RESULT [7:0] $end
$var wire 8 C DATA2 [7:0] $end
$var wire 8 D DATA1 [7:0] $end
$upscope $end
$scope module case2 $end
$var wire 8 E RESULT [7:0] $end
$var wire 8 F DATA2 [7:0] $end
$var wire 8 G DATA1 [7:0] $end
$upscope $end
$scope module case3 $end
$var wire 8 H RESULT [7:0] $end
$var wire 8 I DATA2 [7:0] $end
$var wire 8 J DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module mux1 $end
$var wire 1 6 SELECT $end
$var wire 8 K IN2 [7:0] $end
$var wire 8 L IN1 [7:0] $end
$var reg 8 M OUT [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 N IN1 [7:0] $end
$var wire 8 O IN2 [7:0] $end
$var wire 1 5 SELECT $end
$var reg 8 P OUT [7:0] $end
$upscope $end
$scope module reg_file1 $end
$var wire 1 # CLK $end
$var wire 8 Q IN [7:0] $end
$var wire 3 R INADDRESS [2:0] $end
$var wire 8 S OUT1 [7:0] $end
$var wire 3 T OUT1ADDRESS [2:0] $end
$var wire 8 U OUT2 [7:0] $end
$var wire 3 V OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 4 WRITE $end
$scope begin $ivl_for_loop0 $end
$var integer 32 W i [31:0] $end
$upscope $end
$upscope $end
$scope module twocomp1 $end
$var wire 8 X IN [7:0] $end
$var wire 8 Y OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
1$
0#
bx "
bx !
$end
#4
b0 W
1#
#5
b1 W
b0 3
b0 !
b0 2
0$
#6
b100 3
b10 W
#7
b0 ,
b0 T
b101 +
b101 V
b0 (
b0 R
b0 1
b101 .
b101 O
b11 W
b101 "
b101 %
#8
b101 -
b101 8
b101 @
b101 C
b101 F
b101 I
b101 P
14
06
15
b0 0
b0 7
b100 W
0#
#9
b101 /
b101 >
b101 Q
bx1x1 :
bx1x1 H
b0x0x ;
b0x0x E
b101 =
b101 ?
b101 W
b0 *
b0 9
b0 A
b0 D
b0 G
b0 J
b0 S
#10
b101 :
b101 H
b0 ;
b0 E
b110 W
#11
b111 W
b101 <
b101 B
#12
b0 &
b0 M
b0 N
b1000 W
b0 )
b0 L
b0 U
b0 X
1#
#13
b0 '
b0 K
b0 Y
b100 !
b100 2
#14
b1000 3
#15
b1001 -
b1001 8
b1001 @
b1001 C
b1001 F
b1001 I
b1001 P
b1 +
b1 V
b1 (
b1 R
b1001 .
b1001 O
b10000000000001001 "
b10000000000001001 %
#16
b1001 /
b1001 >
b1001 Q
b1001 :
b1001 H
b1001 =
b1001 ?
0#
#17
b1001 <
b1001 B
#20
1#
#21
b1000 !
b1000 2
#22
b1100 3
#23
b1 -
b1 8
b1 @
b1 C
b1 F
b1 I
b1 P
b10 (
b10 R
b1001 &
b1001 M
b1001 N
b1 1
b1 .
b1 O
b1001 )
b1001 L
b1001 U
b1001 X
b1000000100000000000000001 "
b1000000100000000000000001 %
#24
b1 /
b1 >
b1 Q
b1001 -
b1001 8
b1001 @
b1001 C
b1001 F
b1001 I
b1001 P
b1 :
b1 H
b1 =
b1 ?
b11110111 '
b11110111 K
b11110111 Y
05
0#
#25
b1001 /
b1001 >
b1001 Q
b1001 :
b1001 H
b1001 =
b1001 ?
#28
1#
#29
b1100 !
b1100 2
#30
b10000 3
#31
b10 ,
b10 T
b0 +
b0 V
b11 (
b11 R
b10 1
b0 .
b0 O
b10000000110000001000000000 "
b10000000110000001000000000 %
#32
b1 0
b1 7
0#
#33
b0 -
b0 8
b0 @
b0 C
b0 F
b0 I
b0 P
b0 &
b0 M
b0 N
b1001 *
b1001 9
b1001 A
b1001 D
b1001 G
b1001 J
b1001 S
b0 )
b0 L
b0 U
b0 X
#34
b0 =
b0 ?
b0 '
b0 K
b0 Y
#36
1#
#37
b10000 !
b10000 2
#38
b10100 3
#39
b11 ,
b11 T
b1 +
b1 V
b100 (
b100 R
b11 1
b1 .
b1 O
b11000001000000001100000001 "
b11000001000000001100000001 %
#40
16
0#
#41
b1001 )
b1001 L
b1001 U
b1001 X
#42
b11110111 -
b11110111 8
b11110111 @
b11110111 C
b11110111 F
b11110111 I
b11110111 P
b11110111 &
b11110111 M
b11110111 N
b11110111 '
b11110111 K
b11110111 Y
#43
b11111111 :
b11111111 H
b1 ;
b1 E
b11110111 =
b11110111 ?
#44
b0 /
b0 >
b0 Q
b0 <
b0 B
1#
#45
b10100 !
b10100 2
#46
b11000 3
#47
b0 ,
b0 T
b101 +
b101 V
b0 (
b0 R
b0 1
b1110101 .
b1110101 O
b1110101 "
b1110101 %
#48
b1001 &
b1001 M
b1001 N
b1110101 -
b1110101 8
b1110101 @
b1110101 C
b1110101 F
b1110101 I
b1110101 P
b11110111 /
b11110111 >
b11110111 Q
06
15
b0 0
b0 7
0#
#49
b1110101 /
b1110101 >
b1110101 Q
b0 &
b0 M
b0 N
b1111101 :
b1111101 H
b1110101 =
b1110101 ?
b0 *
b0 9
b0 A
b0 D
b0 G
b0 J
b0 S
b0 )
b0 L
b0 U
b0 X
#50
b1110101 :
b1110101 H
b0 ;
b0 E
b0 '
b0 K
b0 Y
#51
b1110101 <
b1110101 B
#52
1#
#53
b11000 !
b11000 2
#54
b11100 3
#55
b10010010 -
b10010010 8
b10010010 @
b10010010 C
b10010010 F
b10010010 I
b10010010 P
b10 +
b10 V
b1 (
b1 R
b10010010 .
b10010010 O
b1110101 *
b1110101 9
b1110101 A
b1110101 D
b1110101 G
b1110101 J
b1110101 S
b10000000010010010 "
b10000000010010010 %
#56
b10010010 /
b10010010 >
b10010010 Q
b11110111 :
b11110111 H
b10010010 =
b10010010 ?
b10000 ;
b10000 E
0#
#57
b1001 &
b1001 M
b1001 N
b1001 )
b1001 L
b1001 U
b1001 X
b111 <
b111 B
#58
b11110111 '
b11110111 K
b11110111 Y
#60
1#
#61
b11100 !
b11100 2
#62
b100000 3
#63
b1 ,
b1 T
b0 -
b0 8
b0 @
b0 C
b0 F
b0 I
b0 P
b0 +
b0 V
b101 (
b101 R
b100 1
b0 .
b0 O
b100000001010000000100000000 "
b100000001010000000100000000 %
#64
b1001 -
b1001 8
b1001 @
b1001 C
b1001 F
b1001 I
b1001 P
b0 /
b0 >
b0 Q
b1110101 :
b1110101 H
b0 ;
b0 E
b0 =
b0 ?
05
b10 0
b10 7
0#
#65
b1110101 -
b1110101 8
b1110101 @
b1110101 C
b1110101 F
b1110101 I
b1110101 P
b1 /
b1 >
b1 Q
b1110101 &
b1110101 M
b1110101 N
b1111101 :
b1111101 H
b1 ;
b1 E
b1001 =
b1001 ?
b10010010 *
b10010010 9
b10010010 A
b10010010 D
b10010010 G
b10010010 J
b10010010 S
b1110101 )
b1110101 L
b1110101 U
b1110101 X
